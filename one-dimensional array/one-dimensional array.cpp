#include <iostream>

using namespace std;

int main()
{
	/*
	 Массив - это совокупность переменных одного и того же типа, с одним и тем же именем. 
	 Используется для хранения однотипной информации и служит заменой объявлений n-го количества 
	 переменных.

	 Массив располагается в памяти последовательно, элемент за элементом. Сначала идёт нулевой, 
	 потом первый и т.д.

	 Каждый элемент массива имеет свою собственную размерность, которая напрямую зависит от типа 
	 всего массива. Например, если массив имеет тип данных int - размер каждого элемента в нем - 
	 4 байта. Таким образом, общий размер всего массива вычисляется по формуле: 
	 размер_массива = размер_типа_данных * количество_элементов_в_массиве

	 Синтаксис объявления массива:
	      тип_данных имя_массива[количество_элементов];
	 тип_данных - любой из существующих типов данных.
	 имя_массива - любое имя, которое подчиняется "правилам именования переменных".
	 количество_элементов - число элементов в массиве. На данном месте должно находиться  
	 целочисленное константное значение. Таким значением может быть либо целочисленный литерал, 
	 либо константная целочисленная переменная.
	 */

	int numbers[4];

	const int nSize = 6;
	double doubles[nSize];

	// Обращение к элементам массива.
	// Нумерация элементов в массиве начинается с нуля.

	// Запись значения в массив:
	// имя_массива[индекс_элемента] = значение;

	// Получение значения из массива:
	// cout << имя_массива[индекс_элемента];

	// На место индекса_элемента может быть подставлено любое целочисленное значение, в том числе 
	// выражение, результатом которого является целое число.
	const int nArraySize = 3;
	int ar[nArraySize];

	ar[1] = 7;
	cout << ar[1] << endl;

	// Варианты инициализации массива.
	// Первый способ – инициализация при создании.
	// тип_данных имя_массива[количество элементов] = {значение1, значение2, ... значение n};
	const int nInitSize1 = 3;
	int arrayInit1[nInitSize1] = { 2, 33, 4 };

	// При такой форме инициализации есть некоторые особенности:
	// 1. Количество элементов можно не указывать. Операционная система сама определит размер 
	// массива исходя из числа элементов в списке инициализации.
	// тип_данных имя_массива[] = {значение1, значение2, ... значение n};
	int arrayInit2[] = { 2, 33, 4 };	// В данной строке массив автоматически получит размер 3.

	// 2. Если число элементов в списке инициализации меньше чем число элементов массива, то 
	// оставшиеся значения автоматически заполняются нулями.
	int arrayInit3[6] = { 1, 2, 3 };
	// такая запись эквивалентна записи:
	int arrayInit4[6] = { 1, 2, 3, 0, 0, 0 };
	// обнуление массива
	int arrayInit5[6] = {};
	
	// 3. Если значений в списке инициализации больше чем количество элементов массива, то 
	// происходит ошибка на этапе компиляции.
	//int arrayInit6[2] = {1, 2, 3}; // Ошибка на этапе компиляции.

	// списковая инициализация массива
	int arrayInit6[6] { 1, 2, 3 };

	// Второй способ - инициализация массива при помощи цикла.
	// В этом случае заполнять значения массива будет пользователь.
	const int nInitSize2 = 3;
	int arrayInit7[nInitSize2];

	for (int i = 0; i < nInitSize2; i++)
	{
		cout << "Enter value at index " << i << " ";

		// На каждой итерации цикла введенное пользователем значение записывается 
		// в элемент массива с индексом i.
		cin >> arrayInit7[i];
	}

	cout << endl;

	// Показ содержимого массива на экран.
	for (int i = 0; i < nInitSize2; i++)
	{
		cout << "arrayInit7[" << i << "] = " << arrayInit7[i] << endl;
	}

	return 0;
}